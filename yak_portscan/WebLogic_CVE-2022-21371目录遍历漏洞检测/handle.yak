# port scan plugin
yakit.AutoInitYakit()

pathSlice := [".//META-INF/MANIFEST.MF", 
".//WEB-INF/web.xml", 
".//WEB-INF/portlet.xml", 
".//WEB-INF/weblogic.xml"]


handleCheck = func(target,port){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)

    freq, err := fuzz.UrlsToHTTPRequests(addr)
    die(err)

    // freq.FuzzMethod("GET").FuzzPath(pathSlice...).Show()
    res, err := freq.FuzzMethod("GET").FuzzPath(pathSlice...).Exec(httpool.https(isTls))
    die(err)
    // dump(rsp)

    if len(res) > 0 {

        
        //遍历查询结果
        go func{
            for result := range res {
                if result.Response.StatusCode == 200 {
                    yakit.Info("weblogic Check Path: " + result.Url)
                    if (str.MatchAllOfSubString(result.Response.Body,"<web-app")&&str.MatchAllOfSubString(result.Response.Body,"</web-app>"))||
                    str.MatchAllOfSubString(result.Response.Header,"text/xml")||
                    str.MatchAllOfSubString(result.Response.Header,"application/xml"){
                        risk.NewRisk(
                            addr, risk.severity("high"), risk.type("目录遍历"),
                            risk.title("WebLogicServer目录遍历漏洞CVE-2022-21371"),
                            risk.payload(result.Url),
                        )
                    }
                }
            }
            
            return
        }
        
       
    }

    return
}

handle = func(result /* *fp.MatchResult */) {
    // handle match result
    if !result.IsOpen(){
        return
    }

    if len(result.Fingerprint.HttpFlows)>0{
        handleCheck(result.Target,result.Port)
    }
    
}
