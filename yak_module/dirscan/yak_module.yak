yakit.AutoInitYakit()
// 字典参考  https://github.com/insightglacier/Dictionary-Of-Pentesting
yakit.Info("开始解析参数")
log.Info("开始解析参数")
concurrent = cli.Int("concurrent", cli.setDefault(50))
timeoutPerRequest = cli.Int("timeout", cli.setDefault(5))
target = cli.String("target")
proxy = cli.String("proxy")
cookie = cli.String("cookie")
isHEAD  = cli.Bool("head"/*type ...cli.setHelp|cli.setDefault*/,cli.setDefault(false))
ua = cli.String("user-agent", cli.setDefault(`Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36`))
retry = cli.Int("retry", cli.setDefault(2))
redirectTimes = cli.Int("redirectTimes", cli.setDefault(2))
isHTTPS = cli.Bool("https"/*type ...cli.setHelp|cli.setDefault*/,cli.setDefault(false))
dir = cli.LineDict("file",/*type ...cli.setHelp|cli.setDefault*/)
edir = cli.LineDict("ef", /*type ...cli.setHelp|cli.setDefault*/)

insTarget ,err= str.ParseStringUrlToUrlInstance(target)


debug = cli.Bool("debug")
if debug {
    log.setLevel("debug")
}else{
    log.setLevel("info")
}



//对target 进行去重处理
// targets = x.RemoveRepeat(append(targets,target))


// if len(dir) == 0{
//     dir = fuzz.Strings("{{x(dis)}}")
// }


opts = [
    httpool.https(isHTTPS/*type: bool*/),
    httpool.redirectTimes(redirectTimes),
    httpool.perRequestTimeout(timeoutPerRequest),
    httpool.size(concurrent),
]

appendOpt = func(opt){
    opts = append(opts,opt)
}


if proxy != "" {
    appendOpt(httpool.proxy(proxy))
}

freq ,err = fuzz.HTTPRequest(`GET / HTTP/1.1
    Host: 127.0.0.1`)

die(err)

if isHEAD {
    freq = freq.FuzzMethod("HEAD")
}


yakit.EnableWebsiteTrees(insTarget.Host)

freq = freq.FuzzHTTPHeader("Host", insTarget.Host)


if str.Contains(insTarget.Path, "{{"){
    ch,err  =  freq.FuzzPath(insTarget.Path).Exec(opts...)
}else{
    ch,err = freq.FuzzPath(dir...).Exec(opts...)
}


die(err)

checkFound = func(rst) {
    // 检测
    if rst.Response.StatusCode == 200 {
        log.Info("found %s",rst.Url)

        yakit.SaveHTTPFlow(rst.Url, rst.Request, rst.Response)
        yakit.Info("found %s",rst.Url)
        return
    }

    if rst.response.StatusCode == 302 {

    }

}


for result = range ch {
    if result.Error  != nil {
        continue
    }
    log.debug(result.Url)
    checkFound(result)
}
